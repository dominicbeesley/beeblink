* Random notes

Brain dump that's on GitHub so I have a backup.

* =--serial-test-XXX=

Send sequences of bytes from PC to BBC and vice versa, to check that
the underlying link is basically working. The tests run forever, and
the receiving end will crap out with an error if it receives something
unexpected.

Find the BBC files in the =beeblink= volume.

** PC to BBC

1. Quit server if it's already running

2. Run =T.PC-TO-BBC= on the Beeb

3. Run server with =--serial-test-pc-to-bbc= when requested

** BBC to PC

1. Quit server if it's already running

2. Run =T.BBC-TO-PC= on the Beeb

3. Run server with =--serial-test-bbc-to-pc=

4. Press any key on the BBC when requested

* Volume types

** DFS

For compatibility with DFS software - but with longer names and no
file limit.

File name format: =#.########=

Hierarchy: no

** ADFS
   
For compatibility with ADFS software or ADFS disk images.

File name format: =########=

Hierarchy: yes

Path separator: =.=

Parent dir: =^=

** PC

File name format: =*=

Hierarchy: yes

Path separator: =/= or =\= (

Parent dir: =..=

Unusual behaviour:

- file name character set is ASCII 33-126 (note that U+00A3 POUND SIGN
  is not permitted). All characters are just passed through and it's
  up to the PC filing system to complain

- only files with names <=20 (TBC) chars are supported. This is mostly
  so that it's feasible to print something useful in Mode 7 for =*CAT=
  or =*INFO=, but you probably don't want 21+ char names anyway...

- limited support for OSGBPB A=5, A=6, A=7 or A=8 (don't want to have
  to think about issues with file name length)

- PC volumes do not contain drives

- files in PC volumes never have BBC-style metadata - load/exec
  addresses always read as $ffffffff (producing =Won't= error as
  appropriate). Attributes reflect the attributes on the PC filing
  system

- files matching =*.txt= are interpreted as text, with newline
  normalization translation

* Speed tests

Back-of-the-envelope calculations to give peak plausible-ish throughput, for actual code that might actually run from a ROM.

BBC->server:

: lda (ptr),Y   ; +5 = 5   assume no page crossing
: sta via+0     ; +6 = 11
: lda #$10      ; +2 = 13
: -
: bit via+13    ; +6 = 19
: beq -         ; +2 = 21  assume branch not taken
: iny           ; +2 = 23

So 23N+3 for N unrolls, or 2e6/((23*N+3)/N). For 1 page:

1x = 75.12KBytes/sec
2x = 79.72KBytes/sec
4x = 82.24KBytes/sec
8x = 83.56KBytes/sec

Server->BBC:

: stx via+0     ; +6 = 6   arbitrary value to set the handshaking off
: lda #$10      ; +2 = 8
: -
: bit via+13    ; +6 = 14
: beq -         ; +2 = 16  assume branch not taken
: lda via+0     ; +6 = 22
: sta (ptr),Y   ; +6 = 28
: iny           ; +2 = 30

So 30N+3 for N unrolls, or 2e6/((30*N+3)/N). For 1 page:

1x = 59.19KBytes/sec
2x = 62.00KBytes/sec
4x = 63.52KBytes/sec
8x = 64.30KBytes/sec

Parasite throughput will be a bit faster in each case since there's no
need for indexing. But it's 10uS/byte so peak throughput is 100,000
bytes/sec.

** Base

as at 3d8d71fef08f9e7c457b5f600f50e98f09ba6fed:

SERVER: Host<->server: 116,736 bytes in 4 tests
SERVER:   Send: 50.89 KBytes/sec
SERVER:   Recv: 45.42 KBytes/sec
SERVER: Parasite<->server: 122,880 bytes in 4 tests
SERVER:   Send: 54.05 KBytes/sec
SERVER:   Recv: 47.43 KBytes/sec

** Parasite pagewise send tweak

There are obvious minor inefficiencies here.

Store VIA IFR mask in A, use BIT to test IFR, and X to store the byte.
Save 2 cycles each time.

SERVER: Host<->server: 112,640 bytes in 4 tests
SERVER:   Send: 50.93 KBytes/sec
SERVER:   Recv: 45.45 KBytes/sec
SERVER: Parasite<->server: 122,880 bytes in 4 tests
SERVER:   Send: 60.30 KBytes/sec
SERVER:   Recv: 47.24 KBytes/sec

Conclusion: yes.

** Parasite pagewise send unroll

Unroll 2x (no branch tweaks required)

SERVER: Host<->server: 116,736 bytes in 4 tests
SERVER:   Send: 50.89 KBytes/sec
SERVER:   Recv: 45.24 KBytes/sec
SERVER: Parasite<->server: 122,880 bytes in 4 tests
SERVER:   Send: 62.18 KBytes/sec
SERVER:   Recv: 46.88 KBytes/sec

Unroll 4x (no branch tweaks required)

SERVER: Host<->server: 116,736 bytes in 4 tests
SERVER:   Send: 50.89 KBytes/sec
SERVER:   Recv: 45.24 KBytes/sec
SERVER: Parasite<->server: 122,880 bytes in 4 tests
SERVER:   Send: 63.83 KBytes/sec
SERVER:   Recv: 47.43 KBytes/sec

Unroll 8x (with branch tweaks)

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 50.80 KBytes/sec
SERVER:   Recv: 45.24 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 63.69 KBytes/sec
SERVER:   Recv: 47.39 KBytes/sec

Unroll 16x (with branch tweaks)

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 50.98 KBytes/sec
SERVER:   Recv: 45.31 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 63.56 KBytes/sec
SERVER:   Recv: 47.39 KBytes/sec

Conclusion: stick with 4x.

** AVR USB_USBTask

Call USB_USBTsask a lot less often when waiting for BBC to become
ready. (Maintain a uint16_t counter. When it's 0 after incrementing,
call USB_USBTsask.)

Unroll 4x (no branch tweaks required):

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 70.72 KBytes/sec
SERVER:   Recv: 58.40 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 71.43 KBytes/sec
SERVER:   Recv: 59.76 KBytes/sec

Unroll 8x (with branch tweaks):

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 70.37 KBytes/sec
SERVER:   Recv: 58.40 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 70.75 KBytes/sec
SERVER:   Recv: 59.64 KBytes/sec

Unroll 16x (with branch tweaks):

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 70.72 KBytes/sec
SERVER:   Recv: 58.40 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 70.92 KBytes/sec
SERVER:   Recv: 60.00 KBytes/sec

Conclusion: this is a good change.

** Parasite pagewise recv tweak

Store VIA IFR mask in A, use BIT to test IFR, and X to store the byte.
Save 2 cycles each time.

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 70.54 KBytes/sec
SERVER:   Recv: 58.28 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 71.26 KBytes/sec
SERVER:   Recv: 63.83 KBytes/sec

** Parasite pagewise recv unroll

Unroll 2x (no branch tweaks required):

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 70.90 KBytes/sec
SERVER:   Recv: 58.52 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 71.26 KBytes/sec
SERVER:   Recv: 67.72 KBytes/sec

Unroll 4x (no branch tweaks required):

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 70.37 KBytes/sec
SERVER:   Recv: 58.28 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 70.92 KBytes/sec
SERVER:   Recv: 66.37 KBytes/sec

Unroll 8x (with branch tweaks):

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 70.54 KBytes/sec
SERVER:   Recv: 58.52 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 70.92 KBytes/sec
SERVER:   Recv: 67.26 KBytes/sec

Unroll 16x not reliably any quicker.

Conclusion: 2x = good.

** Tweak parasite stragglers recv loop

Make sure it's exactly 48 cycles in the fastest route through. Result
appears to be noise.

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 70.54 KBytes/sec
SERVER:   Recv: 58.40 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 70.92 KBytes/sec
SERVER:   Recv: 68.03 KBytes/sec

** Tweak parasite stragglers send loop

Ditto. Pretty sure this difference is just noise...

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 70.72 KBytes/sec
SERVER:   Recv: 58.16 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 71.09 KBytes/sec
SERVER:   Recv: 67.87 KBytes/sec

** Tweak host send pagewise loop

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 70.90 KBytes/sec
SERVER:   Recv: 58.40 KBytes/sec

Unroll 2x

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 76.61 KBytes/sec
SERVER:   Recv: 58.40 KBytes/sec

Unroll 4x

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 73.83 KBytes/sec
SERVER:   Recv: 58.40 KBytes/sec

Conclusion: 2x = good

** Tweak host recv pagewise loop

Unroll 2x

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 76.82 KBytes/sec
SERVER:   Recv: 60.25 KBytes/sec

Unroll 4x

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 76.61 KBytes/sec
SERVER:   Recv: 61.29 KBytes/sec

Unroll 8x

SERVER: Host<->server: 291,840 bytes in 10 tests
SERVER:   Send: 76.82 KBytes/sec
SERVER:   Recv: 61.29 KBytes/sec

Conclusion: 4x = good

Hardly seems worth bothering with the straggler loops. There's no real
fat there.

** Parasite pairwise send

Before:

SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 71.09 KBytes/sec
SERVER:   Recv: 67.87 KBytes/sec

One pair per iteration:

SERVER: Parasite<->server: 309,750 bytes in 10 tests
SERVER:   Send: 62.63 KBytes/sec
SERVER:   Recv: 69.06 KBytes/sec

Unroll 2x:

SERVER: Host<->server: 294,390 bytes in 10 tests
SERVER:   Send: 77.28 KBytes/sec
SERVER:   Recv: 61.69 KBytes/sec
SERVER: Parasite<->server: 309,750 bytes in 10 tests
SERVER:   Send: 62.37 KBytes/sec
SERVER:   Recv: 68.90 KBytes/sec

Not going to bother doing any more with this. The code is still there,
just toggled out.

* AVR code tweaks

Before (I think - reconstituted from the above):

SERVER: Host<->server: 294,390 bytes in 10 tests
SERVER:   Send: 77.28 KBytes/sec
SERVER:   Recv: 61.69 KBytes/sec
SERVER: Parasite<->server: 307,200 bytes in 10 tests
SERVER:   Send: 71.09 KBytes/sec
SERVER:   Recv: 67.87 KBytes/sec

Macroize various bits.

SERVER: Host<->server: 294,390 bytes in 10 tests
SERVER:   Send: 74.87 KBytes/sec
SERVER:   Recv: 61.69 KBytes/sec
SERVER: Parasite<->server: 309,750 bytes in 10 tests
SERVER:   Send: 81.31 KBytes/sec
SERVER:   Recv: 68.90 KBytes/sec

Macroize *everything*. Not sure this does much for the readability,
but it doesn't hurt the speed...

SERVER: Host<->server: 294,390 bytes in 10 tests
SERVER:   Send: 78.12 KBytes/sec
SERVER:   Recv: 61.96 KBytes/sec
SERVER: Parasite<->server: 309,750 bytes in 10 tests
SERVER:   Send: 84.26 KBytes/sec
SERVER:   Recv: 69.22 KBytes/sec

Rough figures:

Host send = 2000000/(78.12*1024) = 25 cycles/bytes
Host recv = 2000000/(61.96*1024) = 31.5 cycles/byte
Parasite send = 2000000/(84.26*1024) = 23.2 cycles/byte
Parasite recv = 2000000/(69.22*1024) = 28.2 cycles/byte

Since the host recv case hardly improved due to the AVR code tweaks,
the limit is presumably the 6502 code in that case. (Not sure there's
a vast amount to be squeezed out there, but, maybe...)

The host send/recv cases are now the 6.5 cycles apart you'd expect.
Recv is always going to be ~6-7 cycles slower, because there's an
extra 1MHz read, and the (zp),Y write always takes 6 cycles
(*SPEEDTEST transfers page-aligned data so the send case never hits
the page boundary crossin when reading).

The fact parasite recv is only 5 cycles slower than send is a bit
suspicious. Is there a bit more to be squeezed out here?

Add fast path for non-verbose large transfers:

SERVER: Host<->server: 294,390 bytes in 10 tests
SERVER:   Send: 78.55 KBytes/sec
SERVER:   Recv: 61.83 KBytes/sec
SERVER: Parasite<->server: 309,750 bytes in 10 tests
SERVER:   Send: 85.69 KBytes/sec
SERVER:   Recv: 69.06 KBytes/sec

2000000/(85.69*1024) = 22.8 cycles/byte

Going to keep this change anyway, because it's the right thing to do,
even if it doesn't make much of a difference...
* Boot notes

Private workspace claim (request type 2) happens early on in the boot
process, and it isn't claimed - so it's a good place to reset the
link-started flag.

ROM boot (request type 3) can be claimed, so there's no guarantee the
BLFS ROM will receive it.

* Tube widget

Stardot thread: https://stardot.org.uk/forums/viewtopic.php?f=3&t=14398

* copy/paste fodder

#+begin_src text
          7   6   5   4   3   2   1   0
        +---+---+---+---+---+---+---+---+
  +0    | 0 | request type              |
        +---+---+---+---+---+---+---+---+
  +1    | size bits 0...7               |
        +---+---+---+---+---+---+---+---+
  +2    | size bits 8...15              |
        +---+---+---+---+---+---+---+---+
  +3    | size bits 16...23             |
        +---+---+---+---+---+---+---+---+
  +4    | size bits 24...31             |
        +---+---+---+---+---+---+---+---+
  +5    |   |   |   |   |   |   |   |   |
        .   .   .   .   .   .   .   .   .
  +N+5  |   |   |   |   |   |   |   |   |
        +---+---+---+---+---+---+---+---+
  +N+6  | SERIAL_YES                    |
        +-------------------------------+
#+end_src

** speed ver 1

Int Tube:

H: S 10.78 R 13.10
P: S 10.97 R 13.50

Ext Tube:

H: S 12.75 R 17.20
P: S 13.03 R 17.87
* UPURS

https://stardot.org.uk/forums/viewtopic.php?f=12&t=3114&start=120#p32581 - routines 

https://stardot.org.uk/forums/viewtopic.php?f=12&t=3114&start=120#p32725 - notes

* HAZEL

https://stardot.org.uk/forums/viewtopic.php?t=19172

* Master Compact Ideas

** Joystick port

Joystick/mouse port is I/O - you get some of the user port pins. Looks
like UPURS might be feasible.

Objections:

- No PB7, so can't check status with BMI
- Might be a bit flaky, as surely games will fiddle around with this
  all the time?
- If you don't play games, it's a bit rude to steal the mouse port

*** Joystick port pinout

#+begin_example
+-------------+
 \ 1 2 3 4 5 /
  \ 6 7 8 9 /
   +-------+
#+end_example

| Pin | VIA | What      |
|-----+-----+-----------|
|   1 | PB3 | Not Up    |
|   2 | PB2 | Not Down  |
|   3 | PB1 | Not Left  |
|   4 | PB4 | Not Right |
|   5 | CB1 |           |
|   6 | PB0 | Fire      |
|   7 | +5V |           |
|   8 | 0V  |           |
|   9 | CB2 |           |

*** UPURS pinout

| User Port Pin | VIA | PS232 Pin | What |
|---------------+-----+-----------+------|
|             5 |     |         5 | GND  |
|            18 | PB6 |         8 | CTS  |
|            20 | PB7 |         3 | TXD  |
|             8 | PB1 |         7 | RTS  |
|             6 | PB0 |         2 | RXD  |

User port connector. Looking straight at it.

#+begin_example
                      +-----+ 
+----+----+----+----+-+--+--+-+----+----+----+----+
|  1 |  3 |  5 |  7 |  9 | 11 | 13 | 15 | 17 | 19 |
+----+----+----+----+----+----+----+----+----+----+
|  2 |  4 |  6 |  8 | 10 | 12 | 14 | 16 | 18 | 20 |
+----+----+----+----+----+----+----+----+----+----+
#+end_example

** Edge connector

Connect the Tube Serial widget straight to it?

Tube signals:

| Pin | What  |
|-----+-------|
|     | A6    |
|     | A5    |
|     | A4    |
|     | A3    |
|     | A2    |
|     | A1    |
|     | A0    |
|     | D7    |
|     | D6    |
|     | D5    |
|     | D4    |
|     | D3    |
|     | D2    |
|     | D1    |
|     | D0    |
|     | NRST  |
|     | NTUBE |
|     | NIRQ  |
|     | 2MHZE |
|     | R/NW  |
|     | 0V    |

Edge connector signals:

| Pin | Side A (solder side)  | Side B (component side) |
|-----+-----------------------+-------------------------|
|   1 | SCREEN (0V)           | SCREEN (0V)             |
|   2 | +5V                   | +5V                     |
|   3 | AT13                  | A10                     |
|   4 | NOT RST               | CD3                     |
|   5 | AA15                  | A11                     |
|   6 | A8                    | A9                      |
|   7 | A13                   | CD7                     |
|   8 | A12                   | CD6                     |
|   9 | phi 2 OUT             | CD5                     |
|  10 | not connected         | CD4                     |
|  11 | not connected         | LPTSTP                  |
|  12 | B READ/NOT WRITE      | BA7                     |
|  13 | NOT NMI               | BA6                     |
|  14 | NOT IRQ               | BA5                     |
|  15 | NOT INFC              | BA4                     |
|  16 | NOT INFD              | BA3                     |
|  17 | AA14                  | BA2                     |
|  18 | NOT 8MHz              | BA1                     |
|  19 | 0V                    | BA0                     |
|  20 | PB7 (user port)       | CD0                     |
|  21 | PB6 (user port)       | CD2                     |
|  22 | PB5 (user port)       | CD1                     |
|  23 | - POLARIZATION SLOT - | - POLARIZATION SLOT -   |
|  24 | 0V                    | 0V                      |
|  25 | SCREEN (0V)           | SCREEN (0V)             |

CDx appears to be the data bus? - comes from IC26 (CF30049).

** Tube Serial widget

| Pin | What  |
|-----+-------|
|   1 | 0V    |
|   3 | 0V    |
|   5 | 0V    |
|   7 | 0V    |
|   9 | 0V    |
|  11 | 0V    |
|  13 | 0V    |
|  15 | 0V    |
|  17 | 0V    |
|  19 | 0V    |
|  21 | 0V    |
|  23 | 0V    |
|  25 | 0V    |
|  27 | 0V    |
|  29 | 0V    |
|  31 | +5V   |
|  33 | +5V   |
|  35 | +5V   |
|  37 | +5V   |
|  39 | +5V   |
|   2 | RnW   |
|   4 | 2MHzE |
|   6 | NIRQ  |
|   8 | NTUBE |
|  10 | NRS   |
|  12 | D0    |
|  14 | D1    |
|  16 | D2    |
|  18 | D3    |
|  20 | D4    |
|  22 | D5    |
|  24 | D6    |
|  26 | D7    |
|  28 | A0    |
|  30 | A1    |
|  32 | A2    |
|  34 | A3    |
|  36 | A4    |
|  38 | NC    |
|  40 | NC    |


* Serial port

** bits

- 5 pin domino DIN plug :: https://cpc.farnell.com/deltron-enclosures/611-0520/5-pin-domino-black-din-plug/dp/CN00054
- DB9 socket :: https://cpc.farnell.com/multicomp/mc-dppk9-s-sdr-k/d-sub-connector-rcpt-9pos-solder/dp/CN21799
- 

* Disk image notes

To be reinstated, somewhere.

#+begin_src markdown
  # Disk images

  Use `*READ` to create a disk image from a disk, and `*WRITE` to write
  a disk image to a disk. The syntax for both is similar: specify file,
  drive (the 'other' drive will be deduced automatically when
  necessary), and disk image type.

  ,**Both operations use I/O processor memory from OSHWM onwards!**

  The following single-density types are supported, including truncated
  files. This two options cover the vast majority of BBC disk images
  available.

  ,* `S`/`S*`: .ssd, single-sided DFS
  ,* `D`/`D*`: .dsd, double-sided DFS

  Use `S`/`D` to read/write only the areas occupied by files (much
  quicker when the disk isn't full!), or `S*`/`D*` to read/write the
  whole disk.

  The following double-density types are supported, if the filing
  systems are available:

  ,* `A`/`A*`: ADFS S (160 KB)/M (320 KB)/L (640 KB)
  ,* `SO`/`SO*`: single-sided Opus DDOS/Challenger, 40T (180 KB)/80 T (360 KB)
  ,* `DO`/`DO*`: double-sided Opus DDOS/Challenger, 40T (360 KB)/80 T (720 KB)

  Again, `*` means to read/write the whole disk - otherwise, only
  occupied areas are transferred.

  Truncated double-density images are not supported!

  Notes:

  - protected disks are not supported

  - for `*WRITE`, the target disk must be formatted and of the
    appropriate capacity. There are some checks, but they aren't super
    thorough

  - `*READ` will retry indefinitely in the event of a disk error. If
    this means it just ends up getting stuck, hit ESCAPE to cancel

  - when using Opus DDOS/Challenger, do a `*CAT` of the disk before
    embarking on a `*READ`/`*WRITE`, so that the Opus FS can auto-detect
    the density. You may get spurious disk fault errors otherwise (this
    is a BeebLink bug: https://github.com/tom-seddon/beeblink/issues/42)
  
  - the `*` suffix is actually currently meaningless with the Opus
    DDOS/Challenger disk image types, and the whole disk is always read
    or written
  
  - when using `*READ`, you're creating a BBC file, so it will have a
    BBC-style file name and may well end up needing renaming

#+end_src


* Tube Serial code tidy-up

Try to fit it into 8 KB, if possible.

Ext Tube = cheese wedge
Int Tube = ReCoMini6502

SPEEDTEST, 10 runs

** Initial results

*** Ext Tube

#+begin_example
  Host<->server: 445,440 bytes in 20 tests
      BBC->PC: 97.5 KBytes/sec
      PC->BBC: 92.4 KBytes/sec
  Parasite<->server: 491,520 bytes in 20 tests
      BBC->PC: 89.3 KBytes/sec
      PC->BBC: 88.2 KBytes/sec
#+end_example

*** Int Tube

#+begin_example
  Host<->server: 445,440 bytes in 20 tests
      BBC->PC: 86.6 KBytes/sec
      PC->BBC: 86.1 KBytes/sec
  Parasite<->server: 491,520 bytes in 20 tests
      BBC->PC: 62.5 KBytes/sec
      PC->BBC: 65.1 KBytes/sec
#+end_example

** Transfer routine table rambles

#+begin_src 6502-asm
  ;-------------------------------------------------------------------------
  ;
  ; Transfer routine indexes
  ;
  ; Each entry is (bytes,page)

  ; P: 1 = parasite, 0 = host (set by caller)
  ; R: 1 = recv (server to host/host to parasite), 0 = send (parasite to host/host to server) (set by caller)
  ; I: 1 = itu, 0 = xtu (set by driver routine)
  ; p: 1 = page transfer, 0 = byte transfer (set by driver routine)
                
  ;
  ;   3   2   1
  ; +---+---+---+---+
  ; | P | R | I | p |
  ; +---+---+---+---+

  transfer_routines: .block

  P=8
  S=4
  I=2
  ; p=1 - never set explicitly, there's an INX in the driver
                
  _:=[]
  _..=[recv_host_bytes,recv_host_page]                 ;P=0 S=0 I=0
  _..=[itu_recv_host_bytes,itu_recv_host_page]         ;P=0 S=0 I=1
  _..=[send_host_bytes,send_host_page]                 ;P=0 S=1 I=0
  _..=[itu_send_host_bytes,itu_send_host_page]         ;P=0 S=1 I=1
  _..=[recv_parasite_bytes,recv_parasite_page]         ;P=1 S=0 I=0
  _..=[itu_recv_parasite_bytes,itu_recv_parasite_page] ;P=1 S=0 I=1
  _..=[send_parasite_bytes,send_parasite_page]         ;P=1 S=1 I=0
  _..=[itu_send_parasite_bytes,itu_send_parasite_page] ;P=1 S=1 I=1
  list=_
		  .endblock
#+end_src

#+begin_src 6502-asm
  ;-------------------------------------------------------------------------
  ;
  ; Transfer file data.
  ;
  ; Entry:
  ;
  ; ?link_transfer_direction - set as appropriate
  ;
  ; !payload_addr - address to write data to
  ;
  ; !payload_counter - negative number of bytes left in payload
  ;
  transfer_file_data: .proc
		  sta link_transfer_index
                
		  ; Claim Tube if necessary.
		  lda link_tube_transfer_direction
		  bmi tube_claimed
		  jsr claim_tube
  tube_claimed:

		  jsr negate_payload_counter

		  ; Need to copy any bytes?
		  lda payload_counter+0
		  beq bytes_done

		  ; Initiate Tube transfer mode, if required.
		  ldx #tube_multi_byte_parasite_to_host
		  jsr initiate_tube_transfer

		  ldy link_transfer_index
		  jsr prepare_link_transfer_thunk
		  ldx payload_counter+0
		  jsr link_transfer_thunk

		  ; update dest pointer
		  clc
		  lda payload_addr+0
		  adc payload_counter+0
		  sta payload_addr+0
		  bcc payload_addr_updated_for_bytes
		  inc payload_addr+1
		  bne payload_addr_updated_for_bytes
		  inc payload_addr+2
		  bne payload_addr_updated_for_bytes
		  inc payload_addr+3
  payload_addr_updated_for_bytes:

  bytes_done:
		  ; Need to copy any pages?
		  lda #0
		  sta payload_counter+0
		  jsr test_payload_counter
		  beq done

		  jsr negate_payload_counter
		  ; payload_counter bits 8-31 is the negative page
		  ; count.

		  ldy link_transfer_index
		  iny             ;select page transfer routine
		  jsr prepare_link_transfer_thunk
                
  pages_loop:
		  lda #tube_256_byte_parasite_to_host
		  jsr initiate_tube_transfer

		  jsr link_transfer_thunk

		  inc payload_addr+1
		  bne payload_addr_updated_for_page
		  inc payload_addr+2
		  bne payload_addr_updated_for_page
		  inc payload_addr+3
  payload_addr_updated_for_page:

		  inc payload_counter+1 ;page count bits 0-7
		  bne pages_loop
		  inc payload_counter+2 ;page count bits 8-15
		  bne pages_loop
		  inc payload_counter+3 ;page count bits 16-23
		  bne pages_loop

  done:
		  bit link_tube_transfer_direction
		  bmi tube_released
		  jsr release_tube
  tube_released:

		  rts

  initiate_tube_transfer: .proc
		  ora link_tube_transfer_direction
		  bpl +          ;taken if Tube transfer actually wanted
		  rts
  +
		  ldx #<payload_addr
		  ldy #>payload_addr
		  jmp $406
		  .endproc

  prepare_link_transfer_thunk:
		  lda #$4c
		  sta link_transfer_thunk+0
                
                
		  .endproc
#+end_src
