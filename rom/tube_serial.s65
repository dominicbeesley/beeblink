;-------------------------------------------------------------------------
;
; BeebLink - BBC Micro file storage system
; Copyright (C) 2018 Tom Seddon
; 
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program. If not, see
; <https://www.gnu.org/licenses/>.
;
;-------------------------------------------------------------------------
;
; The Master host code just gets straight to poking the Tube I/O as
; part of its EVENTV handler:
; 
; Send event across Tube
; ----------------------
; 0682 48          H    PHA
; 0683 A9 00       ).   LDA #&00
; 0685 20 91 06     ..  JSR &0691
; 0688 98          .    TYA
; 0689 20 91 06     ..  JSR &0691
; 068C 8A          .    TXA
; 068D 20 91 06     ..  JSR &0691
; 0690 68          h    PLA
; 
; Send byte in A via R1
; ---------------------
; 0691 2C E0 FE    ,`~  BIT &FEE0
; 0694 50 FB       P{   BVC &0691
; 0696 8D E1 FE    .a~  STA &FEE1
; 0699 60          `    RTS
; 
; So the Tube select bit of ACCCON needs some careful handling. If the
; ITU bit had to be disabled to gain access to the FTDI board, the
; access has to be performed with interrupts disabled.
;
;

                .section code

                .cerror NUM_SERIAL_SYNC_ZEROS<0||NUM_SERIAL_SYNC_ZEROS>65535,'NUM_SERIAL_SYNC_ZEROS must be a 16-bit uint'
                
;-------------------------------------------------------------------------
                
                .virtual $fefe
fifo:
                .endv

                .virtual $feff
status: .block
rx_data=$01
tx_space=$02
suspend=$04
configured=$08
                .bend
                .endv

;-------------------------------------------------------------------------

tube_serial: .block

txdp: .macro items
                ; .debug_print \items
                .endm
                
;-------------------------------------------------------------------------

                .section link_startup_workspace
num_sync_zeros_received: .fill 2
startup_itu: .fill 1
                .send link_startup_workspace

; The link startup workspace is a not-very-generous 8 bytes.
startup_end_time=brkthunk+0
startup_current_time=brkthunk+5
startup_max_time=1000 ;in centiseconds
                
;-------------------------------------------------------------------------

                .section fs_zp_workspace
                ; bit 7 set if M128, using internal Tube.
                ; bit 6 set if this flag is valid.
link_itu: .fill 1
link_old_y: .fill 1
link_value: .fill 1
                .send fs_zp_workspace
                
;-------------------------------------------------------------------------
; Check if ACCCON ITU needs resetting to access the FTDI device.
;
; In principle there's a race condition here, and ITU could become
; set. But it looks like the MOS actually just leaves it alone after
; initialisation, so it's all quite safe(tm)...
;
; exit: A=$40 if no handling required (B/B+/M128 with ext Tube or no Tube)
;       A=$c0 if handling required (M128 with int Tube)
; preserves: X; Y

is_itu: .proc
                txa
                pha
                
                ; http://beebwiki.mdfs.net/OSBYTE_&00
                lda #0
                ldx #1
                jsr osbyte

                ; X=0 (Electron), 1 (B), 2 (B+), 3 (Master), 4 (Master
                ; 128), 5 (Master Compact) - all other options appears
                ; to be non-6502.
                cpx #3
                bcc +           ;taken with C=0if not Master

                lda acccon
                and #acccon.itu
                cmp #acccon.itu ;C=1 if int Tube
+

                pla
                tax

                lda #$80
                ror a
                
                rts
                .pend

;-------------------------------------------------------------------------
; Reads status register during startup. Handles Tube palaver if
; required.
;
; exit: A=value of status register
startup_read_status: .proc
                bit startup_itu
                bmi +

                lda status
                rts

+
                .cpu '65c02'
                php
                sei

                ldx acccon
                lda #acccon.itu
                trb acccon

                lda status

                stx acccon
                plp
                .cpu 'default'
                rts
                .pend

;-------------------------------------------------------------------------
; Read FIFO during startup. Handles Tube palaver if required.
;
; exit: C=0 if no data was available
;       C=1 if data was available, A = value read
startup_read_fifo: .proc
                bit startup_itu
                bmi itu

read_fifo:
                lda status
                and #status.rx_data
                bne got_data

no_data:
                clc
                rts

got_data:
                lda fifo
                sec
                rts

itu:
                .cpu '65c02'
                php
                sei

                ldx acccon

                lda #acccon.itu
                trb acccon

                jsr read_fifo

                stx acccon
                plp
                .cpu 'default'
                rts
                .pend

;-------------------------------------------------------------------------
; Write FIFO during startup. Handles Tube palaver if required.
;
; entry: Y=value to write
; exit: C=0 if no space
;       C=1 if data was written
startup_write_fifo: .proc
                bit startup_itu
                bmi itu

write_y_fifo:
                lda status
                and #status.tx_space
                bne space

no_space:
                clc
                rts

space:
                sty fifo
                sec
                rts

itu:
                .cpu '65c02'
                php
                sei

                lda #acccon.itu
                trb acccon

                jsr write_y_fifo

                lda #acccon.itu
                tsb acccon

                ror a           ;save carry
                
                plp
                .cpu 'default'

                asl a           ;restore carry
                rts
                .pend
                
;-------------------------------------------------------------------------

startup: .proc
                jsr is_itu
                sta startup_itu

                ; Initialise startup end time.
                lda #1          ;read system clock
                ldx #<startup_end_time
                ldy #>startup_end_time
                jsr osword

                .debug_print ['Time now: &',startup_end_time+4,startup_end_time+3,startup_end_time+2,startup_end_time+1,startup_end_time+0,'\r']

                clc
                lda startup_end_time+0
                adc #<startup_max_time
                sta startup_end_time+0
                lda startup_end_time+1
                adc #>startup_max_time
                sta startup_end_time+1
                bcc +
                inc startup_end_time+2
                bne +
                inc startup_end_time+3
                bne +
                inc startup_end_time+4
+
                
                .debug_print ['End time: &',startup_end_time+4,startup_end_time+3,startup_end_time+2,startup_end_time+1,startup_end_time+0,'\r']

wait_for_device_ready_loop:
                jsr check_startup_timeout
                bcs not_ready
                jsr startup_read_status
                
                ; wait for bit 3 to become set.
                and #status.configured
                beq wait_for_device_ready_loop

start_sync:
                lda #0
                sta num_sync_zeros_received+0
                sta num_sync_zeros_received+1

                .block
                .debug_print ['Sync step 0...\r']
sync_step_0_loop:
                jsr check_startup_timeout
                bcs timed_out

                lda #$80
                jsr startup_write_fifo

                bcc sync_step_0_loop
                .bend

                .block
                .debug_print ['Sync step 1...\r']
sync_step_1_loop:
                ; .print ['&00: sent: &',num_sync_zeros_sent+1,num_sync_zeros_sent+0,'; received: &',num_sync_zeros_received+1,num_sync_zeros_received+0,'\r']
                jsr check_startup_timeout
                bcs timed_out

                ; Try to write $00. If it didn't get sent, no
                ; problem... plenty more where that came from.
                ldy #$00
                jsr startup_write_fifo
                
                ; Try to get more data. If none available, just carry
                ; on looping.
                jsr startup_read_fifo
                bcc sync_step_1_loop

                ; If a non-0 was received, restart the sync process.
                cmp #0
                bne start_sync

                ; Count one more zero received.
                ldx #num_sync_zeros_received
                jsr add1z16

                ; Keep going if required number not reached.
                lda num_sync_zeros_received+0
                cmp #<NUM_SERIAL_SYNC_ZEROS
                bne sync_step_1_loop

                lda num_sync_zeros_received+1
                cmp #>NUM_SERIAL_SYNC_ZEROS
                bne sync_step_1_loop
                .bend

                .block
                ; Keep reading until the 1 byte is received. Continue
                ; sending zeros meanwhile.
                .debug_print ['Sync step 2...\r']
sync_step_2_loop:
                jsr check_startup_timeout
                bcs timed_out

                ; Try to write $00. If it didn't get sent, no
                ; problem... plenty more where that came from.
                ldy #$00
                jsr startup_write_fifo

                jsr startup_read_fifo
                bcc sync_step_2_loop

                cmp #0
                beq sync_step_2_loop

                cmp #1
                bne failed
                .bend

                .block
                ; Send a single non-zero byte.
                .debug_print ['Sync step 3...\r']
sync_step_3_loop:
                jsr check_startup_timeout
                bcs timed_out

                ldy #$01
                jsr startup_write_fifo
                bcc sync_step_3_loop
                .bend
ok:
                .debug_print ['Sync success (probably)\r']
                clc             ;good
                rts

failed:
                ldx #status_text.sync_failed-status_text
                sec             ;no good
                rts

timed_out:
                ldx #status_text.sync_timed_out-status_text
                sec
                rts

not_ready:
                ldx #status_text.device_not_ready-status_text
                sec             ;no good
                rts

; send_sync_zero:
;                 lda #0
; send_sync_byte:
;                 jsr safe_write_fifo
;                 bcc +           ;taken if write failed

;                 ; ldx #num_sync_zeros_sent
;                 ; jsr add1z16
; +
;                 rts

check_startup_timeout:
                lda #1          ;read system clock
                ldx #<startup_current_time
                ldy #>startup_current_time
                jsr osword

                sec
                .for i=0,i<=4,i+=1
                lda startup_end_time+i
                sbc startup_current_time+i
                .next

                bpl no_timeout

timeout:
                .debug_print ['Timeout time: &',startup_current_time+4,startup_current_time+3,startup_current_time+2,startup_current_time+1,startup_current_time+0,'\r']
                sec
                rts

no_timeout:
                clc
                rts
                
                .pend

status_text: .block
device_not_ready:
                .text 'Device not ready',0
sync_failed:
                .text 'Sync failed',0
sync_timed_out:
                .text 'Sync timeout',0
                .bend
                
;-------------------------------------------------------------------------
;
; Prepare link.
;
; Set Master 128 ITU flag... and anything else???
prepare: .proc
                bit link_itu
                bvs +
                pha
                jsr is_itu
                sta link_itu
                pla
+
                .txdp ['link_prepare: &',link_itu,'\r']
                rts
                .pend

;-------------------------------------------------------------------------
;
; Unprepare link.
;
; (Nothing needs to be done for the Tube serial.)
unprepare: .proc
                rts
                .pend

;-------------------------------------------------------------------------
;
; Placeholder for stuff I haven't done yet.
;
error: .proc
                .brk_error 255,'Tube serial transfer = TODO'
                .pend

;-------------------------------------------------------------------------
;
; Placeholder for stuff that doesn't need doing.
;
nop: .proc
                rts
                .pend

;-------------------------------------------------------------------------
;
; Send a byte on B/B+/M128 with no Tube/ext Tube.
;
; entry: Y = value to send
; preserves: X
send_byte: .macro
                .txdp ['send_byte: sending &',DP_Y]

                lda #status.tx_space
-
                bit status
                beq -
                sty fifo
                .txdp ['\r']
                .endm

;-------------------------------------------------------------------------
;
; Receive a byte on B/B+/M128 with no Tube/ext Tube.
;
; entry:
; exit: A = byte received
; preserves: X

recv_byte: .macro
                .txdp ['recv_byte: received &']
                lda #status.rx_data
-
                bit status
                beq -
                lda fifo
                .txdp [DP_A,'\r']
                .endm
                
;-------------------------------------------------------------------------
;
; Send a byte on Master 128 when the internal Tube is active.
;
; The loop is arranged so it doesn't just spin with interrupts
; disabled the whole time. This makes it less efficient than necessary
; when it loops, but the assumption is that this will be quite rare.
;
; entry: Y = value to send
; preserves: X
itu_send_byte: .macro
                .txdp ['itu_send_byte: sending &',DP_Y]
                .cpu '65c02'
-
                php
                sei
                lda #acccon.itu
                trb acccon
                lda status
                and #status.tx_space
                bne +
                lda #acccon.itu
                tsb acccon
                plp
                bra -
+
                sty fifo
                lda #acccon.itu
                tsb acccon
                plp
                .txdp ['\r']
                .cpu 'default'
                .endm

;-------------------------------------------------------------------------
;
; Receive a byte on Master 128 when the internal Tube is active.
;
; exit: ?link_value = byte received
; preserves: X/Y
itu_recv_byte: .macro
                .txdp ['itu_recv_byte: received &']
                .cpu '65c02'
-
                php
                sei
                lda #acccon.itu
                trb acccon
                lda status
                and #status.rx_data
                bne +
                lda #acccon.itu
                tsb acccon
                plp
                bra -
+
                lda fifo
                sta link_value
                lda #acccon.itu
                tsb acccon
                plp
                .txdp [DP_A,'\r']
                .endm

;-------------------------------------------------------------------------

send_header_byte: .proc
                sty link_old_y
                tay
                
                bit link_itu
                bmi itu

                .send_byte
                ldy link_old_y
                rts

itu:
                .itu_send_byte
                ldy link_old_y
                rts
                .pend

;-------------------------------------------------------------------------

send_payload_byte: .proc
                sty link_old_y
                
                tay
                
                bit link_itu
                bmi itu

                .send_byte

                lda scratch_payload_size+0
                bne +

                ldy #1
                .send_byte

+
                ldy link_old_y
                rts

itu:
                .itu_send_byte

                lda scratch_payload_size+0
                bne +

                ldy #1
                .itu_send_byte

+
                ldy link_old_y
                rts
                .pend

;-------------------------------------------------------------------------

recv_header_byte: .proc
                bit link_itu
                bmi itu
                
                ; receive data byte
                .recv_byte
                rts

itu:
                .itu_recv_byte
                lda link_value
                rts
                
                .pend

;-------------------------------------------------------------------------

recv_payload_byte: .proc
                bit link_itu
                bmi itu
                
                ;.debug_print ['tube_serial.r_p_b: &',scratch_payload_size+0,'\r']
                lda scratch_payload_size+0
                bne +

                ;.debug_print ['tube_serial.r_p_b: await confirmation byte: &']

                ; receive and discard confirmation byte
                .recv_byte

                ;.debug_print [DP_A,'\r']

+
                ;.debug_print ['tube_serial.r_p_b: await data byte\r']

                ; receive data byte
                .recv_byte
                
                ;.debug_print ['tube_serial.r_p_b: got: &',DP_A,'\r']
                
                rts

itu:
                lda scratch_payload_size+0
                bne +

                ; receive and discard confirmation byte
                .itu_recv_byte

+
                .itu_recv_byte
                lda link_value
                rts
                
                .pend
                
;-------------------------------------------------------------------------

                .bend
                
                .send code

;-------------------------------------------------------------------------
                
link_name='Tube Serial'
link_prepare=tube_serial.prepare
link_unprepare=tube_serial.unprepare

link_begin_recv=tube_serial.nop
link_begin_send=tube_serial.nop

link_send_header_byte=tube_serial.send_header_byte
link_send_payload_byte=tube_serial.send_payload_byte
link_recv_header_byte=tube_serial.recv_header_byte
link_recv_payload_byte=tube_serial.recv_payload_byte
                
link_startup=tube_serial.startup
link_status_text=tube_serial.status_text
                
link_send_file_data_parasite=send_file_data_parasite_bytewise
link_send_file_data_host=send_file_data_host_bytewise
link_recv_file_data_parasite=recv_file_data_parasite_bytewise
link_recv_file_data_host=recv_file_data_host_bytewise
